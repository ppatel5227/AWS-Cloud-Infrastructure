#        //Group 1//
# INFO2350 - Group Project
# Members: Astha(8912446), Anmol Singh(8975825), Panth Patel(8975227).
# Descriptioin: CloudFormation Template to Deploy Web App and Database Infrastructure


AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation template for deploying web app infrastructure.

Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for both web and database servers.

Resources:

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: Name
          Value: WebVPC1

  # Create a Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a" 
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create a Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: "10.0.2.0/24"
      AvailabilityZone: "us-east-1a" 
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create an Internet Gateway for Public Subnet
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  #  Internet Gateway to the VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
    # Create an Elastic IP for NAT Gateway
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Create a NAT Gateway in the Public Subnet
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: MyNatGateway

  # Create Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  # Route to Internet via IGW
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet with Public Route Table
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Create Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Route from Private Subnet to Internet via NAT Gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Associate Private Subnet with Private Route Table
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Create a Security Group for the Web Application
  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for web server"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: "0.0.0.0/0"  # HTTP
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"  # SSH 

  # Create a Security Group for the Database
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for DB server"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"  # MySQL/MariaDB port
          ToPort: "3306"
          CidrIp: "0.0.0.0/0"  # Allow traffic only from web server subnet
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0" 

  # EC2 Instance for Web Application (Public Subnet)
  WebInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "ami-08a6efd148b1f7504"  
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebSG
      KeyName: "VPC_NEW"  
      Tags:
        - Key: Name
          Value: WebAppInstance

  # EC2 Instance for Database Server (Private Subnet)
  DBInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: "ami-08a6efd148b1f7504"  
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref DBSecurityGroup
      KeyName: "VPC_NEW"  
      Tags:
        - Key: Name
          Value: DBInstance

Outputs:
  WebInstanceID:
    Description: "Web Application EC2 Instance ID"
    Value: !Ref WebInstance

  DBInstanceID:
    Description: "Database EC2 Instance ID"
    Value: !Ref DBInstance
